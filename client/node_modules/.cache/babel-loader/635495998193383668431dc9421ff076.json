{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAILURE, AUTH_ERROR, LOAD_USER, LOGIN_FAILURE } from \"./actionTypes\";\nimport axios from \"axios\";\nimport { setAlert } from \"./alertAction\";\nimport { setAuthToken } from \"../../utility/setAuthToken\";\nexport const register = ({\n  name,\n  email,\n  password,\n  cin\n}) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = {\n    name,\n    email,\n    password,\n    cin\n  };\n\n  try {\n    const res = await axios.post(\"/api/user\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err.message);\n    const errors = err.response.data.errors;\n    if (errors) errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    dispatch({\n      type: REGISTER_FAILURE\n    });\n  }\n};\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) setAuthToken(localStorage.token);\n\n  try {\n    const res = await axios.get(\"/api/user\");\n    dispatch({\n      type: LOAD_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post(\"./api/auth\", body, config);\n    dispatch({\n      type: LOAD_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    dispatch({\n      type: LOGIN_FAILURE\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Walid klai/desktop/STADIUMBOOK/client/src/redux/actions/registerAction.js"],"names":["REGISTER_SUCCESS","REGISTER_FAILURE","AUTH_ERROR","LOAD_USER","LOGIN_FAILURE","axios","setAlert","setAuthToken","register","name","email","password","cin","dispatch","config","headers","body","res","post","type","payload","data","err","console","log","message","errors","response","forEach","error","msg","loadUser","localStorage","token","get","login"],"mappings":"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","sourcesContent":["import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAILURE,\r\n  AUTH_ERROR,\r\n  LOAD_USER,\r\n  LOGIN_FAILURE,\r\n} from \"./actionTypes\";\r\nimport axios from \"axios\";\r\nimport { setAlert } from \"./alertAction\";\r\nimport { setAuthToken } from \"../../utility/setAuthToken\";\r\n\r\nexport const register = ({ name, email, password, cin }) => async (\r\n  dispatch\r\n) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = {\r\n    name,\r\n    email,\r\n    password,\r\n    cin,\r\n  };\r\n  try {\r\n    const res = await axios.post(\"/api/user\", body, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    console.log(err.message);\r\n    const errors = err.response.data.errors;\r\n    if (errors)\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\r\n    dispatch({\r\n      type: REGISTER_FAILURE,\r\n    });\r\n  }\r\n};\r\n\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.token) setAuthToken(localStorage.token);\r\n  try {\r\n    const res = await axios.get(\"/api/user\");\r\n    dispatch({\r\n      type: LOAD_USER,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\nexport const login = ({ email, password }) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = {\r\n    email,\r\n    password,\r\n  };\r\n  try {\r\n    const res = await axios.post(\"./api/auth\", body, config);\r\n    dispatch({\r\n      type: LOAD_USER,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n      const errors=err.response.data.errors\r\n      if(errors)\r\n      errors.forEach(error=>dispatch(setAlert(error.msg,'danger')))\r\n    dispatch({\r\n      type: LOGIN_FAILURE,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
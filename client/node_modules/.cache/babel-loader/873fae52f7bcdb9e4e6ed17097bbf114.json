{"ast":null,"code":"import { ADD_STADIUM_FAILURE, ADD_STADIUM_SUCCESS, FILTER_STADIUMS, GET_STADIUMS, REMOVE_STADIUM, GET_SINGLE_STADIUM } from \"../actions/actionTypes\";\nconst initialState = {\n  stadiums: [],\n  stadium: null,\n  loading: true\n};\n\nconst stadiumReducer = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_STADIUMS:\n      return { ...state,\n        loading: false,\n        stadiums: [...payload]\n      };\n\n    case FILTER_STADIUMS:\n      return { ...state,\n        loading: false,\n        stadiums: [...payload]\n      };\n\n    /* case FILTER_STADIUMS:\r\n      switch (payload.name) {\r\n        case \"name\":\r\n          return state.filter((stadium) =>\r\n            stadium.name.includes(payload.value)\r\n          );\r\n        case \"governorate\":\r\n          return state.filter((stadium) =>\r\n            stadium.address.governorate.includes(payload.value)\r\n          );\r\n        case \"city\":\r\n          return state.filter((stadium) =>\r\n            stadium.address.city.includes(payload.value)\r\n          );\r\n        default:\r\n          return state;\r\n      } */\n\n    case ADD_STADIUM_SUCCESS:\n      return { ...state,\n        loading: false,\n        stadiums: [...state.stadiums, payload]\n      };\n\n    case REMOVE_STADIUM:\n      state.stadiums.filter(el => el.id !== payload);\n      return { ...state\n      };\n\n    case GET_SINGLE_STADIUM:\n      return { ...state,\n        loading: false,\n        stadium: payload\n      };\n\n    case ADD_STADIUM_FAILURE:\n    default:\n      return state;\n  }\n};\n\nexport default stadiumReducer;","map":{"version":3,"sources":["C:/Users/Walid klai/desktop/STADIUMBOOK/client/src/redux/reducers/stadiumReducer.js"],"names":["ADD_STADIUM_FAILURE","ADD_STADIUM_SUCCESS","FILTER_STADIUMS","GET_STADIUMS","REMOVE_STADIUM","GET_SINGLE_STADIUM","initialState","stadiums","stadium","loading","stadiumReducer","state","action","type","payload","filter","el","id"],"mappings":"AAAA,SACEA,mBADF,EAEEC,mBAFF,EAGEC,eAHF,EAIEC,YAJF,EAKEC,cALF,EAMEC,kBANF,QAOO,wBAPP;AASA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,OAAO,EAAC,IAFW;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;;AAMA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACvD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKV,YAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELF,QAAAA,OAAO,EAAE,KAFJ;AAGLF,QAAAA,QAAQ,EAAE,CAAC,GAAGO,OAAJ;AAHL,OAAP;;AAKA,SAAKZ,eAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELF,QAAAA,OAAO,EAAC,KAFH;AAGLF,QAAAA,QAAQ,EAAC,CAAC,GAAGO,OAAJ;AAHJ,OAAP;;AAKJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKb,mBAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELF,QAAAA,OAAO,EAAE,KAFJ;AAGLF,QAAAA,QAAQ,EAAE,CAAC,GAAGI,KAAK,CAACJ,QAAV,EAAmBO,OAAnB;AAHL,OAAP;;AAKF,SAAKV,cAAL;AACEO,MAAAA,KAAK,CAACJ,QAAN,CAAeQ,MAAf,CAAuBC,EAAD,IAAQA,EAAE,CAACC,EAAH,KAAUH,OAAxC;AACA,aAAO,EACL,GAAGH;AADE,OAAP;;AAGF,SAAKN,kBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,OAAO,EAAC,KAFH;AAGLD,QAAAA,OAAO,EAACM;AAHH,OAAP;;AAKF,SAAKd,mBAAL;AACA;AACE,aAAOW,KAAP;AAjDJ;AAmDD,CArDD;;AAuDA,eAAeD,cAAf","sourcesContent":["import {\r\n  ADD_STADIUM_FAILURE,\r\n  ADD_STADIUM_SUCCESS,\r\n  FILTER_STADIUMS,\r\n  GET_STADIUMS,\r\n  REMOVE_STADIUM,\r\n  GET_SINGLE_STADIUM\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  stadiums: [],\r\n  stadium:null,\r\n  loading: true,\r\n};\r\n\r\nconst stadiumReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case GET_STADIUMS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        stadiums: [...payload],\r\n      };\r\n      case FILTER_STADIUMS:\r\n        return {\r\n          ...state,\r\n          loading:false,\r\n          stadiums:[...payload]\r\n        }\r\n    /* case FILTER_STADIUMS:\r\n      switch (payload.name) {\r\n        case \"name\":\r\n          return state.filter((stadium) =>\r\n            stadium.name.includes(payload.value)\r\n          );\r\n        case \"governorate\":\r\n          return state.filter((stadium) =>\r\n            stadium.address.governorate.includes(payload.value)\r\n          );\r\n        case \"city\":\r\n          return state.filter((stadium) =>\r\n            stadium.address.city.includes(payload.value)\r\n          );\r\n        default:\r\n          return state;\r\n      } */\r\n    case ADD_STADIUM_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        stadiums: [...state.stadiums,payload],\r\n      };\r\n    case REMOVE_STADIUM:\r\n      state.stadiums.filter((el) => el.id !== payload);\r\n      return {\r\n        ...state,\r\n      };\r\n    case GET_SINGLE_STADIUM:\r\n      return {\r\n        ...state,\r\n        loading:false,\r\n        stadium:payload\r\n      }\r\n    case ADD_STADIUM_FAILURE:\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default stadiumReducer;\r\n"]},"metadata":{},"sourceType":"module"}